# Autogenerated wrapper script for VTKMinimal_jll for x86_64-linux-gnu-cxx11
export libvtkCommonSystem, libvtkogg, libvtkRenderingVolume, libvtkCommonCore, libvtkCommonTransforms, libvtkParallelCore, libvtkFiltersSources, libvtkFiltersModeling, libvtkCommonExecutionModel, libvtkIOImage, libvtkIOLegacy, libvtkFiltersGeneral, libvtkIOMovie, libvtkIOCore, libvtkRenderingCore, libvtkImagingCore, libvtkFiltersExtraction, libvtkRenderingVolumeOpenGL2, libvtkRenderingOpenGL2, libvtkFiltersStatistics, libvtkIOXMLParser, libvtkImagingMath, libvtkImagingGeneral, libvtkDICOMParser, libvtkCommonColor, libvtkRenderingAnnotation, libvtkRenderingFreeType, libvtkInteractionStyle, libvtkRenderingContext2D, libvtkImagingHybrid, libvtkIOXML, libvtkImagingFourier, libvtkdoubleconversion, libvtkInteractionWidgets, libvtkFiltersCore, libvtkImagingSources, libvtkmetaio, libvtkFiltersFlowPaths, libvtkFiltersGeometry, libvtkCommonMath, libvtkCommonDataModel, libvtkImagingColor, libvtkCommonComputationalGeometry, libvtkFiltersHybrid, libvtkRenderingContextOpenGL2, libvtktheora, libvtksys, libvtkCommonMisc

using GLEW_jll
using Xorg_libXi_jll
using Xorg_libXtst_jll
using Xorg_libXt_jll
using Xorg_libICE_jll
using Xorg_libSM_jll
using Libtiff_jll
using JpegTurbo_jll
using libpng_jll
using Zlib_jll
using FreeType2_jll
using Expat_jll
using Lz4_jll
using XZ_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"

# Relative path to `libvtkCommonSystem`
const libvtkCommonSystem_splitpath = ["lib64", "libvtkCommonSystem.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonSystem_path = ""

# libvtkCommonSystem-specific global declaration
# This will be filled out by __init__()
libvtkCommonSystem_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonSystem = "libvtkCommonSystem.so.1"


# Relative path to `libvtkogg`
const libvtkogg_splitpath = ["lib64", "libvtkogg.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkogg_path = ""

# libvtkogg-specific global declaration
# This will be filled out by __init__()
libvtkogg_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkogg = "libvtkogg.so.1"


# Relative path to `libvtkRenderingVolume`
const libvtkRenderingVolume_splitpath = ["lib64", "libvtkRenderingVolume.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkRenderingVolume_path = ""

# libvtkRenderingVolume-specific global declaration
# This will be filled out by __init__()
libvtkRenderingVolume_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkRenderingVolume = "libvtkRenderingVolume.so.1"


# Relative path to `libvtkCommonCore`
const libvtkCommonCore_splitpath = ["lib64", "libvtkCommonCore.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonCore_path = ""

# libvtkCommonCore-specific global declaration
# This will be filled out by __init__()
libvtkCommonCore_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonCore = "libvtkCommonCore.so.1"


# Relative path to `libvtkCommonTransforms`
const libvtkCommonTransforms_splitpath = ["lib64", "libvtkCommonTransforms.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonTransforms_path = ""

# libvtkCommonTransforms-specific global declaration
# This will be filled out by __init__()
libvtkCommonTransforms_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonTransforms = "libvtkCommonTransforms.so.1"


# Relative path to `libvtkParallelCore`
const libvtkParallelCore_splitpath = ["lib64", "libvtkParallelCore.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkParallelCore_path = ""

# libvtkParallelCore-specific global declaration
# This will be filled out by __init__()
libvtkParallelCore_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkParallelCore = "libvtkParallelCore.so.1"


# Relative path to `libvtkFiltersSources`
const libvtkFiltersSources_splitpath = ["lib64", "libvtkFiltersSources.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersSources_path = ""

# libvtkFiltersSources-specific global declaration
# This will be filled out by __init__()
libvtkFiltersSources_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersSources = "libvtkFiltersSources.so.1"


# Relative path to `libvtkFiltersModeling`
const libvtkFiltersModeling_splitpath = ["lib64", "libvtkFiltersModeling.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersModeling_path = ""

# libvtkFiltersModeling-specific global declaration
# This will be filled out by __init__()
libvtkFiltersModeling_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersModeling = "libvtkFiltersModeling.so.1"


# Relative path to `libvtkCommonExecutionModel`
const libvtkCommonExecutionModel_splitpath = ["lib64", "libvtkCommonExecutionModel.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonExecutionModel_path = ""

# libvtkCommonExecutionModel-specific global declaration
# This will be filled out by __init__()
libvtkCommonExecutionModel_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonExecutionModel = "libvtkCommonExecutionModel.so.1"


# Relative path to `libvtkIOImage`
const libvtkIOImage_splitpath = ["lib64", "libvtkIOImage.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkIOImage_path = ""

# libvtkIOImage-specific global declaration
# This will be filled out by __init__()
libvtkIOImage_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkIOImage = "libvtkIOImage.so.1"


# Relative path to `libvtkIOLegacy`
const libvtkIOLegacy_splitpath = ["lib64", "libvtkIOLegacy.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkIOLegacy_path = ""

# libvtkIOLegacy-specific global declaration
# This will be filled out by __init__()
libvtkIOLegacy_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkIOLegacy = "libvtkIOLegacy.so.1"


# Relative path to `libvtkFiltersGeneral`
const libvtkFiltersGeneral_splitpath = ["lib64", "libvtkFiltersGeneral.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersGeneral_path = ""

# libvtkFiltersGeneral-specific global declaration
# This will be filled out by __init__()
libvtkFiltersGeneral_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersGeneral = "libvtkFiltersGeneral.so.1"


# Relative path to `libvtkIOMovie`
const libvtkIOMovie_splitpath = ["lib64", "libvtkIOMovie.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkIOMovie_path = ""

# libvtkIOMovie-specific global declaration
# This will be filled out by __init__()
libvtkIOMovie_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkIOMovie = "libvtkIOMovie.so.1"


# Relative path to `libvtkIOCore`
const libvtkIOCore_splitpath = ["lib64", "libvtkIOCore.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkIOCore_path = ""

# libvtkIOCore-specific global declaration
# This will be filled out by __init__()
libvtkIOCore_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkIOCore = "libvtkIOCore.so.1"


# Relative path to `libvtkRenderingCore`
const libvtkRenderingCore_splitpath = ["lib64", "libvtkRenderingCore.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkRenderingCore_path = ""

# libvtkRenderingCore-specific global declaration
# This will be filled out by __init__()
libvtkRenderingCore_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkRenderingCore = "libvtkRenderingCore.so.1"


# Relative path to `libvtkImagingCore`
const libvtkImagingCore_splitpath = ["lib64", "libvtkImagingCore.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkImagingCore_path = ""

# libvtkImagingCore-specific global declaration
# This will be filled out by __init__()
libvtkImagingCore_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkImagingCore = "libvtkImagingCore.so.1"


# Relative path to `libvtkFiltersExtraction`
const libvtkFiltersExtraction_splitpath = ["lib64", "libvtkFiltersExtraction.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersExtraction_path = ""

# libvtkFiltersExtraction-specific global declaration
# This will be filled out by __init__()
libvtkFiltersExtraction_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersExtraction = "libvtkFiltersExtraction.so.1"


# Relative path to `libvtkRenderingVolumeOpenGL2`
const libvtkRenderingVolumeOpenGL2_splitpath = ["lib64", "libvtkRenderingVolumeOpenGL2.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkRenderingVolumeOpenGL2_path = ""

# libvtkRenderingVolumeOpenGL2-specific global declaration
# This will be filled out by __init__()
libvtkRenderingVolumeOpenGL2_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkRenderingVolumeOpenGL2 = "libvtkRenderingVolumeOpenGL2.so.1"


# Relative path to `libvtkRenderingOpenGL2`
const libvtkRenderingOpenGL2_splitpath = ["lib64", "libvtkRenderingOpenGL2.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkRenderingOpenGL2_path = ""

# libvtkRenderingOpenGL2-specific global declaration
# This will be filled out by __init__()
libvtkRenderingOpenGL2_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkRenderingOpenGL2 = "libvtkRenderingOpenGL2.so.1"


# Relative path to `libvtkFiltersStatistics`
const libvtkFiltersStatistics_splitpath = ["lib64", "libvtkFiltersStatistics.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersStatistics_path = ""

# libvtkFiltersStatistics-specific global declaration
# This will be filled out by __init__()
libvtkFiltersStatistics_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersStatistics = "libvtkFiltersStatistics.so.1"


# Relative path to `libvtkIOXMLParser`
const libvtkIOXMLParser_splitpath = ["lib64", "libvtkIOXMLParser.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkIOXMLParser_path = ""

# libvtkIOXMLParser-specific global declaration
# This will be filled out by __init__()
libvtkIOXMLParser_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkIOXMLParser = "libvtkIOXMLParser.so.1"


# Relative path to `libvtkImagingMath`
const libvtkImagingMath_splitpath = ["lib64", "libvtkImagingMath.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkImagingMath_path = ""

# libvtkImagingMath-specific global declaration
# This will be filled out by __init__()
libvtkImagingMath_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkImagingMath = "libvtkImagingMath.so.1"


# Relative path to `libvtkImagingGeneral`
const libvtkImagingGeneral_splitpath = ["lib64", "libvtkImagingGeneral.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkImagingGeneral_path = ""

# libvtkImagingGeneral-specific global declaration
# This will be filled out by __init__()
libvtkImagingGeneral_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkImagingGeneral = "libvtkImagingGeneral.so.1"


# Relative path to `libvtkDICOMParser`
const libvtkDICOMParser_splitpath = ["lib64", "libvtkDICOMParser.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkDICOMParser_path = ""

# libvtkDICOMParser-specific global declaration
# This will be filled out by __init__()
libvtkDICOMParser_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkDICOMParser = "libvtkDICOMParser.so.1"


# Relative path to `libvtkCommonColor`
const libvtkCommonColor_splitpath = ["lib64", "libvtkCommonColor.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonColor_path = ""

# libvtkCommonColor-specific global declaration
# This will be filled out by __init__()
libvtkCommonColor_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonColor = "libvtkCommonColor.so.1"


# Relative path to `libvtkRenderingAnnotation`
const libvtkRenderingAnnotation_splitpath = ["lib64", "libvtkRenderingAnnotation.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkRenderingAnnotation_path = ""

# libvtkRenderingAnnotation-specific global declaration
# This will be filled out by __init__()
libvtkRenderingAnnotation_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkRenderingAnnotation = "libvtkRenderingAnnotation.so.1"


# Relative path to `libvtkRenderingFreeType`
const libvtkRenderingFreeType_splitpath = ["lib64", "libvtkRenderingFreeType.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkRenderingFreeType_path = ""

# libvtkRenderingFreeType-specific global declaration
# This will be filled out by __init__()
libvtkRenderingFreeType_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkRenderingFreeType = "libvtkRenderingFreeType.so.1"


# Relative path to `libvtkInteractionStyle`
const libvtkInteractionStyle_splitpath = ["lib64", "libvtkInteractionStyle.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkInteractionStyle_path = ""

# libvtkInteractionStyle-specific global declaration
# This will be filled out by __init__()
libvtkInteractionStyle_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkInteractionStyle = "libvtkInteractionStyle.so.1"


# Relative path to `libvtkRenderingContext2D`
const libvtkRenderingContext2D_splitpath = ["lib64", "libvtkRenderingContext2D.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkRenderingContext2D_path = ""

# libvtkRenderingContext2D-specific global declaration
# This will be filled out by __init__()
libvtkRenderingContext2D_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkRenderingContext2D = "libvtkRenderingContext2D.so.1"


# Relative path to `libvtkImagingHybrid`
const libvtkImagingHybrid_splitpath = ["lib64", "libvtkImagingHybrid.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkImagingHybrid_path = ""

# libvtkImagingHybrid-specific global declaration
# This will be filled out by __init__()
libvtkImagingHybrid_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkImagingHybrid = "libvtkImagingHybrid.so.1"


# Relative path to `libvtkIOXML`
const libvtkIOXML_splitpath = ["lib64", "libvtkIOXML.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkIOXML_path = ""

# libvtkIOXML-specific global declaration
# This will be filled out by __init__()
libvtkIOXML_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkIOXML = "libvtkIOXML.so.1"


# Relative path to `libvtkImagingFourier`
const libvtkImagingFourier_splitpath = ["lib64", "libvtkImagingFourier.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkImagingFourier_path = ""

# libvtkImagingFourier-specific global declaration
# This will be filled out by __init__()
libvtkImagingFourier_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkImagingFourier = "libvtkImagingFourier.so.1"


# Relative path to `libvtkdoubleconversion`
const libvtkdoubleconversion_splitpath = ["lib64", "libvtkdoubleconversion.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkdoubleconversion_path = ""

# libvtkdoubleconversion-specific global declaration
# This will be filled out by __init__()
libvtkdoubleconversion_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkdoubleconversion = "libvtkdoubleconversion.so.1"


# Relative path to `libvtkInteractionWidgets`
const libvtkInteractionWidgets_splitpath = ["lib64", "libvtkInteractionWidgets.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkInteractionWidgets_path = ""

# libvtkInteractionWidgets-specific global declaration
# This will be filled out by __init__()
libvtkInteractionWidgets_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkInteractionWidgets = "libvtkInteractionWidgets.so.1"


# Relative path to `libvtkFiltersCore`
const libvtkFiltersCore_splitpath = ["lib64", "libvtkFiltersCore.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersCore_path = ""

# libvtkFiltersCore-specific global declaration
# This will be filled out by __init__()
libvtkFiltersCore_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersCore = "libvtkFiltersCore.so.1"


# Relative path to `libvtkImagingSources`
const libvtkImagingSources_splitpath = ["lib64", "libvtkImagingSources.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkImagingSources_path = ""

# libvtkImagingSources-specific global declaration
# This will be filled out by __init__()
libvtkImagingSources_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkImagingSources = "libvtkImagingSources.so.1"


# Relative path to `libvtkmetaio`
const libvtkmetaio_splitpath = ["lib64", "libvtkmetaio.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkmetaio_path = ""

# libvtkmetaio-specific global declaration
# This will be filled out by __init__()
libvtkmetaio_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkmetaio = "libvtkmetaio.so.1"


# Relative path to `libvtkFiltersFlowPaths`
const libvtkFiltersFlowPaths_splitpath = ["lib64", "libvtkFiltersFlowPaths.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersFlowPaths_path = ""

# libvtkFiltersFlowPaths-specific global declaration
# This will be filled out by __init__()
libvtkFiltersFlowPaths_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersFlowPaths = "libvtkFiltersFlowPaths.so.1"


# Relative path to `libvtkFiltersGeometry`
const libvtkFiltersGeometry_splitpath = ["lib64", "libvtkFiltersGeometry.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersGeometry_path = ""

# libvtkFiltersGeometry-specific global declaration
# This will be filled out by __init__()
libvtkFiltersGeometry_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersGeometry = "libvtkFiltersGeometry.so.1"


# Relative path to `libvtkCommonMath`
const libvtkCommonMath_splitpath = ["lib64", "libvtkCommonMath.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonMath_path = ""

# libvtkCommonMath-specific global declaration
# This will be filled out by __init__()
libvtkCommonMath_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonMath = "libvtkCommonMath.so.1"


# Relative path to `libvtkCommonDataModel`
const libvtkCommonDataModel_splitpath = ["lib64", "libvtkCommonDataModel.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonDataModel_path = ""

# libvtkCommonDataModel-specific global declaration
# This will be filled out by __init__()
libvtkCommonDataModel_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonDataModel = "libvtkCommonDataModel.so.1"


# Relative path to `libvtkImagingColor`
const libvtkImagingColor_splitpath = ["lib64", "libvtkImagingColor.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkImagingColor_path = ""

# libvtkImagingColor-specific global declaration
# This will be filled out by __init__()
libvtkImagingColor_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkImagingColor = "libvtkImagingColor.so.1"


# Relative path to `libvtkCommonComputationalGeometry`
const libvtkCommonComputationalGeometry_splitpath = ["lib64", "libvtkCommonComputationalGeometry.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonComputationalGeometry_path = ""

# libvtkCommonComputationalGeometry-specific global declaration
# This will be filled out by __init__()
libvtkCommonComputationalGeometry_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonComputationalGeometry = "libvtkCommonComputationalGeometry.so.1"


# Relative path to `libvtkFiltersHybrid`
const libvtkFiltersHybrid_splitpath = ["lib64", "libvtkFiltersHybrid.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkFiltersHybrid_path = ""

# libvtkFiltersHybrid-specific global declaration
# This will be filled out by __init__()
libvtkFiltersHybrid_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkFiltersHybrid = "libvtkFiltersHybrid.so.1"


# Relative path to `libvtkRenderingContextOpenGL2`
const libvtkRenderingContextOpenGL2_splitpath = ["lib64", "libvtkRenderingContextOpenGL2.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkRenderingContextOpenGL2_path = ""

# libvtkRenderingContextOpenGL2-specific global declaration
# This will be filled out by __init__()
libvtkRenderingContextOpenGL2_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkRenderingContextOpenGL2 = "libvtkRenderingContextOpenGL2.so.1"


# Relative path to `libvtktheora`
const libvtktheora_splitpath = ["lib64", "libvtktheora.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtktheora_path = ""

# libvtktheora-specific global declaration
# This will be filled out by __init__()
libvtktheora_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtktheora = "libvtktheora.so.1"


# Relative path to `libvtksys`
const libvtksys_splitpath = ["lib64", "libvtksys.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtksys_path = ""

# libvtksys-specific global declaration
# This will be filled out by __init__()
libvtksys_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtksys = "libvtksys.so.1"


# Relative path to `libvtkCommonMisc`
const libvtkCommonMisc_splitpath = ["lib64", "libvtkCommonMisc.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libvtkCommonMisc_path = ""

# libvtkCommonMisc-specific global declaration
# This will be filled out by __init__()
libvtkCommonMisc_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libvtkCommonMisc = "libvtkCommonMisc.so.1"


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"VTKMinimal")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    # We first need to add to LIBPATH_list the libraries provided by Julia
    append!(LIBPATH_list, [joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)])
    # From the list of our dependencies, generate a tuple of all the PATH and LIBPATH lists,
    # then append them to our own.
    foreach(p -> append!(PATH_list, p), (GLEW_jll.PATH_list, Xorg_libXi_jll.PATH_list, Xorg_libXtst_jll.PATH_list, Xorg_libXt_jll.PATH_list, Xorg_libICE_jll.PATH_list, Xorg_libSM_jll.PATH_list, Libtiff_jll.PATH_list, JpegTurbo_jll.PATH_list, libpng_jll.PATH_list, Zlib_jll.PATH_list, FreeType2_jll.PATH_list, Expat_jll.PATH_list, Lz4_jll.PATH_list, XZ_jll.PATH_list,))
    foreach(p -> append!(LIBPATH_list, p), (GLEW_jll.LIBPATH_list, Xorg_libXi_jll.LIBPATH_list, Xorg_libXtst_jll.LIBPATH_list, Xorg_libXt_jll.LIBPATH_list, Xorg_libICE_jll.LIBPATH_list, Xorg_libSM_jll.LIBPATH_list, Libtiff_jll.LIBPATH_list, JpegTurbo_jll.LIBPATH_list, libpng_jll.LIBPATH_list, Zlib_jll.LIBPATH_list, FreeType2_jll.LIBPATH_list, Expat_jll.LIBPATH_list, Lz4_jll.LIBPATH_list, XZ_jll.LIBPATH_list,))

    global libvtkCommonSystem_path = normpath(joinpath(artifact_dir, libvtkCommonSystem_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonSystem_handle = dlopen(libvtkCommonSystem_path)
    push!(LIBPATH_list, dirname(libvtkCommonSystem_path))

    global libvtkogg_path = normpath(joinpath(artifact_dir, libvtkogg_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkogg_handle = dlopen(libvtkogg_path)
    push!(LIBPATH_list, dirname(libvtkogg_path))

    global libvtkRenderingVolume_path = normpath(joinpath(artifact_dir, libvtkRenderingVolume_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkRenderingVolume_handle = dlopen(libvtkRenderingVolume_path)
    push!(LIBPATH_list, dirname(libvtkRenderingVolume_path))

    global libvtkCommonCore_path = normpath(joinpath(artifact_dir, libvtkCommonCore_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonCore_handle = dlopen(libvtkCommonCore_path)
    push!(LIBPATH_list, dirname(libvtkCommonCore_path))

    global libvtkCommonTransforms_path = normpath(joinpath(artifact_dir, libvtkCommonTransforms_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonTransforms_handle = dlopen(libvtkCommonTransforms_path)
    push!(LIBPATH_list, dirname(libvtkCommonTransforms_path))

    global libvtkParallelCore_path = normpath(joinpath(artifact_dir, libvtkParallelCore_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkParallelCore_handle = dlopen(libvtkParallelCore_path)
    push!(LIBPATH_list, dirname(libvtkParallelCore_path))

    global libvtkFiltersSources_path = normpath(joinpath(artifact_dir, libvtkFiltersSources_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersSources_handle = dlopen(libvtkFiltersSources_path)
    push!(LIBPATH_list, dirname(libvtkFiltersSources_path))

    global libvtkFiltersModeling_path = normpath(joinpath(artifact_dir, libvtkFiltersModeling_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersModeling_handle = dlopen(libvtkFiltersModeling_path)
    push!(LIBPATH_list, dirname(libvtkFiltersModeling_path))

    global libvtkCommonExecutionModel_path = normpath(joinpath(artifact_dir, libvtkCommonExecutionModel_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonExecutionModel_handle = dlopen(libvtkCommonExecutionModel_path)
    push!(LIBPATH_list, dirname(libvtkCommonExecutionModel_path))

    global libvtkIOImage_path = normpath(joinpath(artifact_dir, libvtkIOImage_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkIOImage_handle = dlopen(libvtkIOImage_path)
    push!(LIBPATH_list, dirname(libvtkIOImage_path))

    global libvtkIOLegacy_path = normpath(joinpath(artifact_dir, libvtkIOLegacy_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkIOLegacy_handle = dlopen(libvtkIOLegacy_path)
    push!(LIBPATH_list, dirname(libvtkIOLegacy_path))

    global libvtkFiltersGeneral_path = normpath(joinpath(artifact_dir, libvtkFiltersGeneral_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersGeneral_handle = dlopen(libvtkFiltersGeneral_path)
    push!(LIBPATH_list, dirname(libvtkFiltersGeneral_path))

    global libvtkIOMovie_path = normpath(joinpath(artifact_dir, libvtkIOMovie_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkIOMovie_handle = dlopen(libvtkIOMovie_path)
    push!(LIBPATH_list, dirname(libvtkIOMovie_path))

    global libvtkIOCore_path = normpath(joinpath(artifact_dir, libvtkIOCore_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkIOCore_handle = dlopen(libvtkIOCore_path)
    push!(LIBPATH_list, dirname(libvtkIOCore_path))

    global libvtkRenderingCore_path = normpath(joinpath(artifact_dir, libvtkRenderingCore_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkRenderingCore_handle = dlopen(libvtkRenderingCore_path)
    push!(LIBPATH_list, dirname(libvtkRenderingCore_path))

    global libvtkImagingCore_path = normpath(joinpath(artifact_dir, libvtkImagingCore_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkImagingCore_handle = dlopen(libvtkImagingCore_path)
    push!(LIBPATH_list, dirname(libvtkImagingCore_path))

    global libvtkFiltersExtraction_path = normpath(joinpath(artifact_dir, libvtkFiltersExtraction_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersExtraction_handle = dlopen(libvtkFiltersExtraction_path)
    push!(LIBPATH_list, dirname(libvtkFiltersExtraction_path))

    global libvtkRenderingVolumeOpenGL2_path = normpath(joinpath(artifact_dir, libvtkRenderingVolumeOpenGL2_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkRenderingVolumeOpenGL2_handle = dlopen(libvtkRenderingVolumeOpenGL2_path)
    push!(LIBPATH_list, dirname(libvtkRenderingVolumeOpenGL2_path))

    global libvtkRenderingOpenGL2_path = normpath(joinpath(artifact_dir, libvtkRenderingOpenGL2_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkRenderingOpenGL2_handle = dlopen(libvtkRenderingOpenGL2_path)
    push!(LIBPATH_list, dirname(libvtkRenderingOpenGL2_path))

    global libvtkFiltersStatistics_path = normpath(joinpath(artifact_dir, libvtkFiltersStatistics_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersStatistics_handle = dlopen(libvtkFiltersStatistics_path)
    push!(LIBPATH_list, dirname(libvtkFiltersStatistics_path))

    global libvtkIOXMLParser_path = normpath(joinpath(artifact_dir, libvtkIOXMLParser_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkIOXMLParser_handle = dlopen(libvtkIOXMLParser_path)
    push!(LIBPATH_list, dirname(libvtkIOXMLParser_path))

    global libvtkImagingMath_path = normpath(joinpath(artifact_dir, libvtkImagingMath_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkImagingMath_handle = dlopen(libvtkImagingMath_path)
    push!(LIBPATH_list, dirname(libvtkImagingMath_path))

    global libvtkImagingGeneral_path = normpath(joinpath(artifact_dir, libvtkImagingGeneral_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkImagingGeneral_handle = dlopen(libvtkImagingGeneral_path)
    push!(LIBPATH_list, dirname(libvtkImagingGeneral_path))

    global libvtkDICOMParser_path = normpath(joinpath(artifact_dir, libvtkDICOMParser_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkDICOMParser_handle = dlopen(libvtkDICOMParser_path)
    push!(LIBPATH_list, dirname(libvtkDICOMParser_path))

    global libvtkCommonColor_path = normpath(joinpath(artifact_dir, libvtkCommonColor_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonColor_handle = dlopen(libvtkCommonColor_path)
    push!(LIBPATH_list, dirname(libvtkCommonColor_path))

    global libvtkRenderingAnnotation_path = normpath(joinpath(artifact_dir, libvtkRenderingAnnotation_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkRenderingAnnotation_handle = dlopen(libvtkRenderingAnnotation_path)
    push!(LIBPATH_list, dirname(libvtkRenderingAnnotation_path))

    global libvtkRenderingFreeType_path = normpath(joinpath(artifact_dir, libvtkRenderingFreeType_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkRenderingFreeType_handle = dlopen(libvtkRenderingFreeType_path)
    push!(LIBPATH_list, dirname(libvtkRenderingFreeType_path))

    global libvtkInteractionStyle_path = normpath(joinpath(artifact_dir, libvtkInteractionStyle_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkInteractionStyle_handle = dlopen(libvtkInteractionStyle_path)
    push!(LIBPATH_list, dirname(libvtkInteractionStyle_path))

    global libvtkRenderingContext2D_path = normpath(joinpath(artifact_dir, libvtkRenderingContext2D_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkRenderingContext2D_handle = dlopen(libvtkRenderingContext2D_path)
    push!(LIBPATH_list, dirname(libvtkRenderingContext2D_path))

    global libvtkImagingHybrid_path = normpath(joinpath(artifact_dir, libvtkImagingHybrid_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkImagingHybrid_handle = dlopen(libvtkImagingHybrid_path)
    push!(LIBPATH_list, dirname(libvtkImagingHybrid_path))

    global libvtkIOXML_path = normpath(joinpath(artifact_dir, libvtkIOXML_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkIOXML_handle = dlopen(libvtkIOXML_path)
    push!(LIBPATH_list, dirname(libvtkIOXML_path))

    global libvtkImagingFourier_path = normpath(joinpath(artifact_dir, libvtkImagingFourier_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkImagingFourier_handle = dlopen(libvtkImagingFourier_path)
    push!(LIBPATH_list, dirname(libvtkImagingFourier_path))

    global libvtkdoubleconversion_path = normpath(joinpath(artifact_dir, libvtkdoubleconversion_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkdoubleconversion_handle = dlopen(libvtkdoubleconversion_path)
    push!(LIBPATH_list, dirname(libvtkdoubleconversion_path))

    global libvtkInteractionWidgets_path = normpath(joinpath(artifact_dir, libvtkInteractionWidgets_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkInteractionWidgets_handle = dlopen(libvtkInteractionWidgets_path)
    push!(LIBPATH_list, dirname(libvtkInteractionWidgets_path))

    global libvtkFiltersCore_path = normpath(joinpath(artifact_dir, libvtkFiltersCore_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersCore_handle = dlopen(libvtkFiltersCore_path)
    push!(LIBPATH_list, dirname(libvtkFiltersCore_path))

    global libvtkImagingSources_path = normpath(joinpath(artifact_dir, libvtkImagingSources_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkImagingSources_handle = dlopen(libvtkImagingSources_path)
    push!(LIBPATH_list, dirname(libvtkImagingSources_path))

    global libvtkmetaio_path = normpath(joinpath(artifact_dir, libvtkmetaio_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkmetaio_handle = dlopen(libvtkmetaio_path)
    push!(LIBPATH_list, dirname(libvtkmetaio_path))

    global libvtkFiltersFlowPaths_path = normpath(joinpath(artifact_dir, libvtkFiltersFlowPaths_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersFlowPaths_handle = dlopen(libvtkFiltersFlowPaths_path)
    push!(LIBPATH_list, dirname(libvtkFiltersFlowPaths_path))

    global libvtkFiltersGeometry_path = normpath(joinpath(artifact_dir, libvtkFiltersGeometry_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersGeometry_handle = dlopen(libvtkFiltersGeometry_path)
    push!(LIBPATH_list, dirname(libvtkFiltersGeometry_path))

    global libvtkCommonMath_path = normpath(joinpath(artifact_dir, libvtkCommonMath_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonMath_handle = dlopen(libvtkCommonMath_path)
    push!(LIBPATH_list, dirname(libvtkCommonMath_path))

    global libvtkCommonDataModel_path = normpath(joinpath(artifact_dir, libvtkCommonDataModel_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonDataModel_handle = dlopen(libvtkCommonDataModel_path)
    push!(LIBPATH_list, dirname(libvtkCommonDataModel_path))

    global libvtkImagingColor_path = normpath(joinpath(artifact_dir, libvtkImagingColor_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkImagingColor_handle = dlopen(libvtkImagingColor_path)
    push!(LIBPATH_list, dirname(libvtkImagingColor_path))

    global libvtkCommonComputationalGeometry_path = normpath(joinpath(artifact_dir, libvtkCommonComputationalGeometry_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonComputationalGeometry_handle = dlopen(libvtkCommonComputationalGeometry_path)
    push!(LIBPATH_list, dirname(libvtkCommonComputationalGeometry_path))

    global libvtkFiltersHybrid_path = normpath(joinpath(artifact_dir, libvtkFiltersHybrid_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkFiltersHybrid_handle = dlopen(libvtkFiltersHybrid_path)
    push!(LIBPATH_list, dirname(libvtkFiltersHybrid_path))

    global libvtkRenderingContextOpenGL2_path = normpath(joinpath(artifact_dir, libvtkRenderingContextOpenGL2_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkRenderingContextOpenGL2_handle = dlopen(libvtkRenderingContextOpenGL2_path)
    push!(LIBPATH_list, dirname(libvtkRenderingContextOpenGL2_path))

    global libvtktheora_path = normpath(joinpath(artifact_dir, libvtktheora_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtktheora_handle = dlopen(libvtktheora_path)
    push!(LIBPATH_list, dirname(libvtktheora_path))

    global libvtksys_path = normpath(joinpath(artifact_dir, libvtksys_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtksys_handle = dlopen(libvtksys_path)
    push!(LIBPATH_list, dirname(libvtksys_path))

    global libvtkCommonMisc_path = normpath(joinpath(artifact_dir, libvtkCommonMisc_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libvtkCommonMisc_handle = dlopen(libvtkCommonMisc_path)
    push!(LIBPATH_list, dirname(libvtkCommonMisc_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

